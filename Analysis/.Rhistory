head(df)
df <- df %>% mutate( numTargets =   (resp2 !="-999") ) #True if 3 targets, False if 2 targets
head(df$numTargets)
df$numTargets <- as.numeric(df$numTargets) + 2
head(df$numTargets)
files<- c("Hubert_14Jun2018_15-24_150soams.txt","Hubert_14Jun2018_15-45_130soams.txt","Hubert_14Jun2018_15-56_140soams.txt")
SOA<- c(150,130,140)
dfAll<-data.frame()
for (i in 1:length(files)) { #read in each file
fileThis<- file.path(rawDataPath,files[i])
rawDataLoad=tryCatch(
read_tsv(fileWithPath),  #read.table(fileThis,sep='\t',header=TRUE),
error=function(e) {
stop( paste0("ERROR reading the file ",fileThis," :",e) )
} )
apparentSubjectName <- strsplit(files[i],split="_")[[1]][1]
subjectName<- rawDataLoad$subject[[1]]
if (apparentSubjectName != subjectName) {
stop( paste0("WARNING apparentSubjectName '",apparentSubjectName,
"' from filename does not match subjectName inside file'",subjectName,"'") )
}
else { cat(paste0(' Subject ',apparentSubjectName,' read in')) }
rawDataLoad$file <- files[i]
rawDataLoad$SOA<- SOA[i]
#Eventually, try to integrate with eye movements file here
tryCatch(
dfAll<-rbind(dfAll,rawDataLoad), #if fail to bind new with old,
error=function(e) { #Give feedback about how the error happened
cat(paste0("Tried to merge but error:",e) )
} )
}
head(df$numTargets)
head(dfAll$numTargets)
colnames(dfAll)
head(dfAll$resp2)
addMyColumns<- function(df) {
df <- df %>% mutate( numTargets =   (resp2 !="-999") ) #True if 3 targets, False if 2 targets
df$numTargets <- as.numeric(df$numTargets) + 2
#Calculate corrStream0, corrStream1, corrStream2
df<-df %>% mutate(corrStrm0 = case_when( whichStreamResp0==0 ~ corrResp0,
whichStreamResp1==0 ~ corrResp1,
whichStreamResp2==0 ~ corrResp2,
TRUE ~ NA_real_ ) )
df<-df %>% mutate(corrStrm1 = case_when( whichStreamResp0==1 ~ corrResp0,
whichStreamResp1==1 ~ corrResp1,
whichStreamResp2==1 ~ corrResp2,
TRUE ~ NA_real_ ) )
df<-df %>% mutate(corrStrm2 = case_when( whichStreamResp0==2 ~ corrResp0,
whichStreamResp1==2 ~ corrResp1,
whichStreamResp2==2 ~ corrResp2,
TRUE ~ NA_real_ ) )
#table(df$corrStrm0,df$numTargets)
#table(df$whichStreamResp0,df$corrResp0)
#table(df$whichStreamResp0,df$corrResp1)
#table(df$whichStreamResp2,df$corrResp2)
print( table(df$corrStrm1,df$numTargets) )
df<-df %>% mutate(pCorrAll = case_when(numTargets == 2 ~ (corrResp0 + corrResp1) / 2,
numTargets == 3 ~ (corrResp0+corrResp1+corrResp2) / 3,
TRUE ~ -900))
return (df)
}
dfAll<-addMyColumns(dfAll)
head(dfAll$numTargets)
dfAll %>% group_by(numTargets,SOA) %>% summarise_at(vars(corrStrm0:corrStrm2), mean, na.rm=TRUE)
table(dfAll$file,dfAll$SOA)
table(dfAll$SOA,dfAll$whichStreamResp0)
head(rawDataLoad)
table(dfAll$SOA,dfAll$resp0)
dfAll<-data.frame()
for (i in 1:length(files)) { #read in each file
fileThis<- file.path(rawDataPath,files[i])
rawDataLoad=tryCatch(
read_tsv(fileThis),  #read.table(fileThis,sep='\t',header=TRUE),
error=function(e) {
stop( paste0("ERROR reading the file ",fileThis," :",e) )
} )
apparentSubjectName <- strsplit(files[i],split="_")[[1]][1]
subjectName<- rawDataLoad$subject[[1]]
if (apparentSubjectName != subjectName) {
stop( paste0("WARNING apparentSubjectName '",apparentSubjectName,
"' from filename does not match subjectName inside file'",subjectName,"'") )
}
else { cat(paste0(' Subject ',apparentSubjectName,' read in')) }
rawDataLoad$file <- files[i]
rawDataLoad$SOA<- SOA[i]
#Eventually, try to integrate with eye movements file here
tryCatch(
dfAll<-rbind(dfAll,rawDataLoad), #if fail to bind new with old,
error=function(e) { #Give feedback about how the error happened
cat(paste0("Tried to merge but error:",e) )
} )
}
table(dfAll$subject)
dfAll<-addMyColumns(dfAll)
dfAll %>% group_by(numTargets,SOA) %>% summarise_at(vars(corrStrm0:corrStrm2), mean, na.rm=TRUE)
dfAll %>% group_by(SOA,numTargets) %>% summarise_at(vars(corrStrm0:corrStrm2), mean, na.rm=TRUE)
head(dfAll)
g<-ggplot(dfAll, aes(color=SOA,shape=numTargets,y=corrStrm0)
g<-g+stat_summary(fun.data="mean_cl_boot",geom="errorbar",width=.3,conf.int=.95) #, width=5,size=1)
g
g<-ggplot(dfAll, aes(color=SOA,shape=numTargets,y=corrStrm0))
g<-g+stat_summary(fun.data="mean_cl_boot",geom="errorbar",width=.3,conf.int=.95) #, width=5,size=1)
g
library(ggplot2)
g<-ggplot(dfAll, aes(color=SOA,shape=numTargets,y=corrStrm0))
g<-g+stat_summary(fun.data="mean_cl_boot",geom="errorbar",width=.3,conf.int=.95) #, width=5,size=1)
g
g<-ggplot(dfAll, aes(color=SOA,shape=as.factor(numTargets),y=corrStrm0))
g<-g+stat_summary(fun.data="mean_cl_boot",geom="errorbar",width=.3,conf.int=.95) #, width=5,size=1)
g
g<-ggplot(dfAll, aes(x=SOA,color=as.factor(numTargets),y=corrStrm0))
g<-g+stat_summary(fun.data="mean_cl_boot",geom="errorbar",width=.3,conf.int=.95) #, width=5,size=1)
g
library(ggplot2)
g<-ggplot(dfAll, aes(x=SOA,color=as.factor(numTargets),y=corrStrm0)) + facet_grid(.~numTargets)
g<-g+stat_summary(fun.data="mean_cl_boot",geom="errorbar",width=.3,conf.int=.95) #, width=5,size=1)
g
g<-ggplot(dfAll, aes(x=SOA,color=as.factor(numTargets),y=corrStrm0)) + facet_grid(.~numTargets)
g<-g+ stat_summary(geom="point") +
stat_summary(fun.data="mean_cl_boot",geom="errorbar",width=.3,conf.int=.95) #, width=5,size=1)
g
g<-ggplot(dfAll, aes(x=SOA,color=as.factor(numTargets),y=corrStrm0)) + facet_grid(.~numTargets)
g<-g+ stat_summary(geom="point",fun.y=mean) +
stat_summary(fun.data="mean_cl_boot",geom="errorbar",width=.3,conf.int=.95) #, width=5,size=1)
g
vignette("tidy-data"
)
dfAll %>%
gather(strm, n, corrStrm0:corrStrm2)
#need to melt corrStrm0,1,2 to make into long format so ggplot can plot all 3
library(tidyr)
dfAll %>%
gather(strm, n, corrStrm0:corrStrm2)
dd<-dfAll %>%
gather(strm, n, corrStrm0:corrStrm2)
head(dd)
dd<-dfAll %>%
gather(correct, strm, corrStrm0:corrStrm2)
dd[39:42,]
dd[,39:42]
dd<-dfAll %>%
gather(strm, corr, corrStrm0:corrStrm2)
dd[,39:42]
dl<-dfAll %>%
gather(strm, corr, corrStrm0:corrStrm2)
dl[,39:42]
library(ggplot2)
g<-ggplot(dl, aes(x=SOA,color=as.factor(numTargets),y=corrStrm0)) + facet_grid(strm~numTargets)
g<-g+ stat_summary(geom="point",fun.y=mean) +
stat_summary(fun.data="mean_cl_boot",geom="errorbar",width=.3,conf.int=.95) #, width=5,size=1)
g
g<-ggplot(dl, aes(x=SOA,color=as.factor(numTargets),y=corr)) + facet_grid(strm~numTargets)
g<-g+ stat_summary(geom="point",fun.y=mean) +
stat_summary(fun.data="mean_cl_boot",geom="errorbar",width=.3,conf.int=.95) #, width=5,size=1)
g
library(ggplot2)
g<-ggplot(dl, aes(x=SOA,color=(numTargets),y=corr)) + facet_grid(strm~numTargets)
g<-g+ stat_summary(geom="point",fun.y=mean) +
stat_summary(fun.data="mean_cl_boot",geom="errorbar",width=.3,conf.int=.95) #, width=5,size=1)
g
?dir
?file.info
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
rawDataPath<- ""
dataFileName<- "BrysbaertNew2009_3ltrWords.txt"
fileWithPath<- file.path(rawDataPath,dataFileName)
rawDataPath<- ""
dataFileName<- "BrysbaertNew2009_3ltrWords.txt"
fileWithPath<- file.path(rawDataPath,dataFileName)
file.exists(fileWithPath)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
rawDataPath<- ""
dataFileName<- "BrysbaertNew2009_3ltrWords.txt"
fileWithPath<- file.path(rawDataPath,dataFileName)
file.exists(fileWithPath)
myPath<- ""
dataFileName<- "BrysbaertNew2009_3ltrWords.txt"
fileWithPath<- file.path(myPath,dataFileName)
dir(myPath)
?dir
myPath<- "."
dataFileName<- "BrysbaertNew2009_3ltrWords.txt"
fileWithPath<- file.path(myPath,dataFileName)
dir(myPath)
myPath<- "."
dataFileName<- "BrysbaertNew2009_3ltrWords.txt"
fileWithPath<- file.path(myPath,dataFileName)
dir(myPath)
file.exists(fileWithPath)
library('readr')#install.packages('readr')
df <-read_tsv(fileWithPath)  #read_tsv from tidyverse readr has advantage of not having padding spaces
#in subject and another column
head(df)
install.packages('dplyr')
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
?write_excel_csv
library(readr)
?write_excel_csv
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
write_excel_csv(dfAll,"dfAll.csv")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
rawDataPath<- "../rawData/pilotJen1"
dataFileName<- "Pilot3_22Jun2018_14-01.txt" # "auto_14Jun2018_15-04.txt"
fileWithPath<- file.path(rawDataPath,dataFileName)
library('readr')#install.packages('readr')
df <-read_tsv(fileWithPath)  #read_tsv from tidyverse readr has advantage of not having padding spaces
#in subject and another column
head(df)
table(df$task)
table(df$task,df$whichStreamEachCue)
library(dplyr)
addMyColumns<- function(df) {
#correct etc are recorded in terms of response number, not stream number. Need to recover stream number
df <- df %>% mutate( numTargets =   (resp2 !="-999") ) #True if 3 targets, False if 2 targets
df$numTargets <- as.numeric(df$numTargets) + 2
#Calculate corrStream0, corrStream1, corrStream2
df<-df %>% mutate(corrStrm0 = case_when( whichStreamResp0==0 ~ corrResp0,
whichStreamResp1==0 ~ corrResp1,
whichStreamResp2==0 ~ corrResp2,
TRUE ~ NA_real_ ) )
df<-df %>% mutate(corrStrm1 = case_when( whichStreamResp0==1 ~ corrResp0,
whichStreamResp1==1 ~ corrResp1,
whichStreamResp2==1 ~ corrResp2,
TRUE ~ NA_real_ ) )
df<-df %>% mutate(corrStrm2 = case_when( whichStreamResp0==2 ~ corrResp0,
whichStreamResp1==2 ~ corrResp1,
whichStreamResp2==2 ~ corrResp2,
TRUE ~ NA_real_ ) )
#table(df$corrStrm0,df$numTargets)
#table(df$whichStreamResp0,df$corrResp0)
#table(df$whichStreamResp0,df$corrResp1)
#table(df$whichStreamResp2,df$corrResp2)
#print( table(df$corrStrm1,df$numTargets) )
df<-df %>% mutate(pCorrAll = case_when(numTargets == 2 ~ (corrResp0 + corrResp1) / 2,
numTargets == 3 ~ (corrResp0+corrResp1+corrResp2) / 3,
TRUE ~ -900))
return (df)
}
dg<-addMyColumns(df)
table(dg$pCorrAll,dg$numTargets)
#Calculate mean performance by conditions
dg %>% group_by(numTargets) %>% summarise_at(vars(corrStrm0:corrStrm2), mean, na.rm=TRUE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
rawDataPath<- "../rawData/pilotJen1"
dataFileName<- "Pilot3_22Jun2018_14-01.txt" # "auto_14Jun2018_15-04.txt"
fileWithPath<- file.path(rawDataPath,dataFileName)
library('readr')#install.packages('readr')
df <-read_tsv(fileWithPath)  #read_tsv from tidyverse readr has advantage of not having padding spaces
#in subject and another column
head(df)
table(df$task)
table(df$task,df$whichStreamEachCue)
library(dplyr)
addMyColumns<- function(df) {
#correct etc are recorded in terms of response number, not stream number. Need to recover stream number
df <- df %>% mutate( numTargets =   (resp2 !="-999") ) #True if 3 targets, False if 2 targets
df$numTargets <- as.numeric(df$numTargets) + 2
#Calculate corrStream0, corrStream1, corrStream2
df<-df %>% mutate(corrStrm0 = case_when( whichStreamResp0==0 ~ corrResp0,
whichStreamResp1==0 ~ corrResp1,
whichStreamResp2==0 ~ corrResp2,
TRUE ~ NA_real_ ) )
df<-df %>% mutate(corrStrm1 = case_when( whichStreamResp0==1 ~ corrResp0,
whichStreamResp1==1 ~ corrResp1,
whichStreamResp2==1 ~ corrResp2,
TRUE ~ NA_real_ ) )
df<-df %>% mutate(corrStrm2 = case_when( whichStreamResp0==2 ~ corrResp0,
whichStreamResp1==2 ~ corrResp1,
whichStreamResp2==2 ~ corrResp2,
TRUE ~ NA_real_ ) )
#table(df$corrStrm0,df$numTargets)
#table(df$whichStreamResp0,df$corrResp0)
#table(df$whichStreamResp0,df$corrResp1)
#table(df$whichStreamResp2,df$corrResp2)
#print( table(df$corrStrm1,df$numTargets) )
df<-df %>% mutate(pCorrAll = case_when(numTargets == 2 ~ (corrResp0 + corrResp1) / 2,
numTargets == 3 ~ (corrResp0+corrResp1+corrResp2) / 3,
TRUE ~ -900))
return (df)
}
dg<-addMyColumns(df)
table(dg$pCorrAll,dg$numTargets)
#Calculate mean performance by conditions
summaryResults<- dg %>% group_by(numTargets) %>% summarise_at(vars(corrStrm0:corrStrm2), mean, na.rm=TRUE)
summaryResults
head(dg)
table(dg$whichStreamEachCue)
summaryResults2<- dg %>% group_by(numTargets,whichStreamEachCue) %>% summarise_at(vars(corrStrm0:corrStrm2), mean, na.rm=TRUE)
summaryResults2
summaryResults1
table(dg$pCorrAll,dg$numTargets)
#Calculate mean performance by conditions
summaryResults1<- dg %>% group_by(numTargets) %>% summarise_at(vars(corrStrm0:corrStrm2), mean, na.rm=TRUE)
summaryResults2<- dg %>% group_by(numTargets,whichStreamEachCue) %>% summarise_at(vars(corrStrm0:corrStrm2), mean, na.rm=TRUE)
summaryResults1
dg$whichStreamEachCue=="[0,1]"
head(dg$whichStreamEachCue
)
dg$whichStreamEachCue=="[0, 1]"
dh <- dg %>% mutate(whichStreamsCued = case_when(whichStreamEachCue == "[0, 1]" | whichStreamEachCue =="[1, 0]" ~ "LM",
whichStreamEachCue == "[0, 2]" | whichStreamEachCue =="[2, 0]" ~ "LR",
whichStreamEachCue == "[1, 2]" | whichStreamEachCue =="[2, 1]" ~ "MR",
TRUE ~ "[0,1,2]") )
table(dh$whichStreamsCued)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
rawDataPath<- "../rawData/pilotJen1"
dataFileName<- "Pilot3_22Jun2018_14-01.txt" # "auto_14Jun2018_15-04.txt"
fileWithPath<- file.path(rawDataPath,dataFileName)
library('readr')#install.packages('readr')
df <-read_tsv(fileWithPath)  #read_tsv from tidyverse readr has advantage of not having padding spaces
#in subject and another column
head(df)
table(df$task)
table(df$task,df$whichStreamEachCue)
library(dplyr)
addMyColumns<- function(df) {
#correct etc are recorded in terms of response number, not stream number. Need to recover stream number
df <- df %>% mutate( numTargets =   (resp2 !="-999") ) #True if 3 targets, False if 2 targets
df$numTargets <- as.numeric(df$numTargets) + 2
#Calculate corrStream0, corrStream1, corrStream2
df<-df %>% mutate(corrStrm0 = case_when( whichStreamResp0==0 ~ corrResp0,
whichStreamResp1==0 ~ corrResp1,
whichStreamResp2==0 ~ corrResp2,
TRUE ~ NA_real_ ) )
df<-df %>% mutate(corrStrm1 = case_when( whichStreamResp0==1 ~ corrResp0,
whichStreamResp1==1 ~ corrResp1,
whichStreamResp2==1 ~ corrResp2,
TRUE ~ NA_real_ ) )
df<-df %>% mutate(corrStrm2 = case_when( whichStreamResp0==2 ~ corrResp0,
whichStreamResp1==2 ~ corrResp1,
whichStreamResp2==2 ~ corrResp2,
TRUE ~ NA_real_ ) )
#table(df$corrStrm0,df$numTargets)
#table(df$whichStreamResp0,df$corrResp0)
#table(df$whichStreamResp0,df$corrResp1)
#table(df$whichStreamResp2,df$corrResp2)
#print( table(df$corrStrm1,df$numTargets) )
df<-df %>% mutate(pCorrAll = case_when(numTargets == 2 ~ (corrResp0 + corrResp1) / 2,
numTargets == 3 ~ (corrResp0+corrResp1+corrResp2) / 3,
TRUE ~ -900))
return (df)
}
dg<-addMyColumns(df)
dg <- dg %>% mutate(whichStreamsCued = case_when(whichStreamEachCue == "[0, 1]" | whichStreamEachCue =="[1, 0]" ~ "LM",
whichStreamEachCue == "[0, 2]" | whichStreamEachCue =="[2, 0]" ~ "LR",
whichStreamEachCue == "[1, 2]" | whichStreamEachCue =="[2, 1]" ~ "MR",
TRUE ~ "LMR") )
#Calculate mean performance by conditions
summaryResults1<- dg %>% group_by(numTargets) %>% summarise_at(vars(corrStrm0:corrStrm2), mean, na.rm=TRUE)
summaryResults2<- dg %>% group_by(numTargets,whichStreamEachCue) %>% summarise_at(vars(corrStrm0:corrStrm2), mean, na.rm=TRUE)
summaryResults3<- dg %>% group_by(numTargets,whichStreamsCued) %>% summarise_at(vars(corrStrm0:corrStrm2), mean, na.rm=TRUE)
summaryResults3
?saveRDS
#saveRDS(summaryResults3,"summaryBy)
write_excel_csv(summaryResults3,"summaryByNumtargetsWhichStreamsCued")
#saveRDS(summaryResults3,"summaryBy)
write_excel_csv(summaryResults3,"summaryByNumtargetsWhichStreamsCued.csv")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
rawDataPath<- "../rawData/pilotJen1"
library('readr')#install.packages('readr')
df <-read_tsv(fileWithPath)  #read_tsv from tidyverse readr has advantage of not having padding spaces
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
rawDataPath<- "../rawData/pilotJen1"
library('readr')#install.packages('readr')
library(dplyr)
addMyColumns<- function(df) {
#correct etc are recorded in terms of response number, not stream number. Need to recover stream number
df <- df %>% mutate( numTargets =   (resp2 !="-999") ) #True if 3 targets, False if 2 targets
df$numTargets <- as.numeric(df$numTargets) + 2
#Calculate corrStream0, corrStream1, corrStream2
df<-df %>% mutate(corrStrm0 = case_when( whichStreamResp0==0 ~ corrResp0,
whichStreamResp1==0 ~ corrResp1,
whichStreamResp2==0 ~ corrResp2,
TRUE ~ NA_real_ ) )
df<-df %>% mutate(corrStrm1 = case_when( whichStreamResp0==1 ~ corrResp0,
whichStreamResp1==1 ~ corrResp1,
whichStreamResp2==1 ~ corrResp2,
TRUE ~ NA_real_ ) )
df<-df %>% mutate(corrStrm2 = case_when( whichStreamResp0==2 ~ corrResp0,
whichStreamResp1==2 ~ corrResp1,
whichStreamResp2==2 ~ corrResp2,
TRUE ~ NA_real_ ) )
#table(df$corrStrm0,df$numTargets)
#table(df$whichStreamResp0,df$corrResp0)
#table(df$whichStreamResp0,df$corrResp1)
#table(df$whichStreamResp2,df$corrResp2)
#print( table(df$corrStrm1,df$numTargets) )
df<-df %>% mutate(pCorrAll = case_when(numTargets == 2 ~ (corrResp0 + corrResp1) / 2,
numTargets == 3 ~ (corrResp0+corrResp1+corrResp2) / 3,
TRUE ~ -900))
df <- df %>% mutate(whichStreamsCued = case_when(whichStreamEachCue == "[0, 1]" | whichStreamEachCue =="[1, 0]" ~ "LM",
whichStreamEachCue == "[0, 2]" | whichStreamEachCue =="[2, 0]" ~ "LR",
whichStreamEachCue == "[1, 2]" | whichStreamEachCue =="[2, 1]" ~ "MR",
TRUE ~ "LMR") )
return (df)
}
dg<-addMyColumns(df)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
rawDataPath<- "../rawData/pilotJen1"
library('readr')#install.packages('readr')
library(dplyr)
addMyColumns<- function(df) {
#correct etc are recorded in terms of response number, not stream number. Need to recover stream number
df <- df %>% mutate( numTargets =   (resp2 !="-999") ) #True if 3 targets, False if 2 targets
df$numTargets <- as.numeric(df$numTargets) + 2
#Calculate corrStream0, corrStream1, corrStream2
df<-df %>% mutate(corrStrm0 = case_when( whichStreamResp0==0 ~ corrResp0,
whichStreamResp1==0 ~ corrResp1,
whichStreamResp2==0 ~ corrResp2,
TRUE ~ NA_real_ ) )
df<-df %>% mutate(corrStrm1 = case_when( whichStreamResp0==1 ~ corrResp0,
whichStreamResp1==1 ~ corrResp1,
whichStreamResp2==1 ~ corrResp2,
TRUE ~ NA_real_ ) )
df<-df %>% mutate(corrStrm2 = case_when( whichStreamResp0==2 ~ corrResp0,
whichStreamResp1==2 ~ corrResp1,
whichStreamResp2==2 ~ corrResp2,
TRUE ~ NA_real_ ) )
#table(df$corrStrm0,df$numTargets)
#table(df$whichStreamResp0,df$corrResp0)
#table(df$whichStreamResp0,df$corrResp1)
#table(df$whichStreamResp2,df$corrResp2)
#print( table(df$corrStrm1,df$numTargets) )
df<-df %>% mutate(pCorrAll = case_when(numTargets == 2 ~ (corrResp0 + corrResp1) / 2,
numTargets == 3 ~ (corrResp0+corrResp1+corrResp2) / 3,
TRUE ~ -900))
df <- df %>% mutate(whichStreamsCued = case_when(whichStreamEachCue == "[0, 1]" | whichStreamEachCue =="[1, 0]" ~ "LM",
whichStreamEachCue == "[0, 2]" | whichStreamEachCue =="[2, 0]" ~ "LR",
whichStreamEachCue == "[1, 2]" | whichStreamEachCue =="[2, 1]" ~ "MR",
TRUE ~ "LMR") )
return (df)
}
files <- dir(path=rawDataPath,pattern='.txt')  #find all data files in this directory
dfAll<-data.frame()
for (i in 1:length(files)) { #read in each file
fileThis<- file.path(rawDataPath,files[i])
rawDataLoad=tryCatch(
read_tsv(fileThis),  #read.table(fileThis,sep='\t',header=TRUE),
error=function(e) {
stop( paste0("ERROR reading the file ",fileThis," :",e) )
} )
#Checks the subject name inside for consistency with the name in the filename
apparentSubjectName <- strsplit(files[i],split="_")[[1]][1]
subjectName<- rawDataLoad$subject[[1]]
if (apparentSubjectName != subjectName) {
stop( paste0("WARNING apparentSubjectName '",apparentSubjectName,
"' from filename does not match subjectName inside file'",subjectName,"'") )
}
else { cat(paste0(' Subject ',apparentSubjectName,' read in')) }
rawDataLoad$file <- files[i]
#Eventually, try to integrate with eye movements file here
tryCatch(
dfAll<-rbind(dfAll,rawDataLoad), #if fail to bind new with old,
error=function(e) { #Give feedback about how the error happened
cat(paste0("Tried to merge but error:",e) )
} )
}
table(dfAll$subject)
table(dfAll$file)
dfAll<-addMyColumns(dfAll)
write_excel_csv(dfAll,"dfAll.csv")
dfAll %>% group_by(SOA,numTargets,subject) %>% summarise_at(vars(corrStrm0:corrStrm2), mean, na.rm=TRUE)
dfAll<-addMyColumns(dfAll)
write_excel_csv(dfAll,"dfAll.csv")
dfAll %>% group_by(numTargets,subject) %>% summarise_at(vars(corrStrm0:corrStrm2), mean, na.rm=TRUE)
#Calculate mean performance by conditions
summaryResults1<- dg %>% group_by(numTargets) %>% summarise_at(vars(corrStrm0:corrStrm2), mean, na.rm=TRUE)
#Calculate mean performance by conditions
summaryResults1<- dfAll %>% group_by(numTargets) %>% summarise_at(vars(corrStrm0:corrStrm2), mean, na.rm=TRUE)
summaryResults2<- dfAll %>% group_by(numTargets,whichStreamEachCue) %>% summarise_at(vars(corrStrm0:corrStrm2), mean, na.rm=TRUE)
summaryResults3<- dfAll %>% group_by(numTargets,whichStreamsCued) %>% summarise_at(vars(corrStrm0:corrStrm2), mean, na.rm=TRUE)
dfAll %>% group_by(numTargets,subject) %>% summarise_at(vars(corrStrm0:corrStrm2), mean, na.rm=TRUE)
summaryResults3
head(dfAll)
summaryResults3<- dfAll %>% group_by(numTargets,whichStreamsCued,subject) %>% summarise_at(vars(corrStrm0:corrStrm2), mean, na.rm=TRUE)
dfAll %>% group_by(numTargets,subject) %>% summarise_at(vars(corrStrm0:corrStrm2), mean, na.rm=TRUE)
summaryResults3
summaryResults3<- dfAll %>% group_by(subject,numTargets,whichStreamsCued) %>% summarise_at(vars(corrStrm0:corrStrm2), mean, na.rm=TRUE)
summaryResults3
